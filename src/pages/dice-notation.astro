---
import Layout from '../layouts/Layout.astro'
import SectionContainer from '../components/ui/SectionContainer.astro'
import MainContent from '../components/MainContent.astro'
import { getEntry } from 'astro:content'
import { generateSidebarFromHeadings } from '../utils/markdown'
import type { MarkdownHeading } from 'astro'

// Get the dice notation content
const diceNotationEntry = await getEntry('docs', 'dice-notation')

if (!diceNotationEntry) {
  throw new Error('Dice notation content not found')
}

// Render the content with proper type assertions
const renderResult = await diceNotationEntry.render()
const Content = renderResult.Content
const headings = renderResult.headings as MarkdownHeading[]

// Generate sidebar content from markdown headings
const sidebarContent = generateSidebarFromHeadings(headings)

// Get the frontmatter data with type assertion
const data = diceNotationEntry.data as {
  title: string
  description: string
  author?: string
  lastModified?: string
  tags?: string[]
}
const { title, description } = data
---

<Layout
  title="Dice Notation - RANDSUM"
  description="Complete guide to RANDSUM dice notation syntax and modifiers"
  sidebarContent={sidebarContent}
>
  <SectionContainer>
    <MainContent class="max-w-4xl">
      <!-- Header -->
      <div class="mb-12">
        <h1 class="text-4xl font-bold text-silver-50 mb-4">
          {title}
        </h1>
        <p class="text-xl text-silver-300 leading-relaxed">
          {description}
        </p>
      </div>

      <!-- Markdown Content -->
      <div class="prose prose-invert max-w-none prose-lg">
        <Content />
      </div>
    </MainContent>
  </SectionContainer>
</Layout>

<script>
  // Smooth scrolling for anchor links
  document.addEventListener('DOMContentLoaded', function () {
    const links = document.querySelectorAll('a[href^="#"]')
    links.forEach((link) => {
      link.addEventListener('click', function (e: Event) {
        e.preventDefault()
        const target = e.target as HTMLAnchorElement
        const targetId = target.getAttribute('href')?.substring(1)
        const targetElement = targetId
          ? document.getElementById(targetId)
          : null
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          })
        }
      })
    })
  })
</script>

<style>
  /* Custom styling for markdown content */
  .prose {
    --tw-prose-body: #dee2e6;
    --tw-prose-headings: #ffffff;
    --tw-prose-lead: #ced4da;
    --tw-prose-links: #e9ecef;
    --tw-prose-bold: #ffffff;
    --tw-prose-counters: #ced4da;
    --tw-prose-bullets: #ced4da;
    --tw-prose-hr: #3f3f46;
    --tw-prose-quotes: #dee2e6;
    --tw-prose-quote-borders: #52525b;
    --tw-prose-captions: #ced4da;
    --tw-prose-code: #e9ecef;
    --tw-prose-pre-code: #e9ecef;
    --tw-prose-pre-bg: #18181b;
    --tw-prose-th-borders: #52525b;
    --tw-prose-td-borders: #3f3f46;
  }

  .prose h2 {
    font-size: 1.875rem;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 1.5rem;
    margin-top: 3rem;
  }

  .prose h3 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 1rem;
    margin-top: 2rem;
  }

  .prose h4 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 0.75rem;
    margin-top: 1.5rem;
  }

  .prose code {
    background-color: #18181b;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    color: #e9ecef;
    font-family:
      ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono',
      Menlo, monospace;
  }

  .prose pre {
    background-color: #18181b;
    border: 1px solid #3f3f46;
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
  }

  .prose pre code {
    background-color: transparent;
    padding: 0;
  }

  .prose p {
    font-size: 1.125rem;
    color: #dee2e6;
    line-height: 1.75;
    margin-bottom: 1.5rem;
  }

  .prose ul,
  .prose ol {
    color: #dee2e6;
    margin-bottom: 1.5rem;
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  .prose blockquote {
    border-left: 4px solid #52525b;
    padding-left: 1rem;
    font-style: italic;
    color: #ced4da;
  }
</style>
